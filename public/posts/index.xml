<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on A Blog for Ben</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on A Blog for Ben</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Apr 2025 12:44:42 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Not this time, Next.js</title>
      <link>http://localhost:1313/posts/2025-04-28/</link>
      <pubDate>Mon, 28 Apr 2025 12:44:42 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-04-28/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a minute since I&amp;rsquo;ve logged activity. I&amp;rsquo;ve been focusing on research and prepping for some technical interviews. It&amp;rsquo;s the kind of activity that doesn&amp;rsquo;t lend itself to those nice green squares on GitHub. But I&amp;rsquo;ve made some architectural breakthroughs during that process.&lt;/p&gt;&#xA;&lt;p&gt;I’ll start by saying, I fully intended to use Next.js for my project rebuild. The more I&amp;rsquo;ve researched it, the better it seems for building performant, SEO-optimized web apps. You gain so many UX and DX benefits: smaller bundles, intuitive routing, server-side data fetching, and improved security, to name a few.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Infinite scroll with a side of Copilot</title>
      <link>http://localhost:1313/posts/2025-04-10/</link>
      <pubDate>Thu, 10 Apr 2025 13:32:50 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-04-10/</guid>
      <description>&lt;p&gt;One of my new goals for using AI as a development tool is to start trying to use it for more than just enhanced autocomplete, with some important limitations. First, I want to make sure I actually continue to learn as I code. So I don&amp;rsquo;t want to use Copilot as a starting point. Second, I don&amp;rsquo;t want to enter a &amp;ldquo;vibe coding&amp;rdquo; loop, blindly accepting changes.&lt;/p&gt;&#xA;&lt;p&gt;I had a good experience with Copilot recently with a self assigned challenge. The goal was to build an &lt;a href=&#34;https://github.com/xxblincolnxx/infinite-scroll&#34; target=&#34;_blank&#34;&gt;implementation of a generic Infinite Scrolling component&lt;/a&gt; or set of hooks/utilities using React and Typescript. Eventually I plan on creating my own components library that I can inject into any of my React projects. This work will probably be a part of that package.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Dad, CAD, and the Bad</title>
      <link>http://localhost:1313/posts/2025-04-04/</link>
      <pubDate>Fri, 04 Apr 2025 11:29:03 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-04-04/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/cad_image.jpg&#34; alt=&#34;CAD&#34;&gt;&#xA;Perspective can be a funny thing… It’s so hard to remember your historical context when you’re “up to your ass in alligators” or “in the thick of it”.&lt;/p&gt;&#xA;&lt;p&gt;Being a software engineer or any kind of tech-adjacent specialist has been a little intimidating lately with all of the AI hype. You&amp;rsquo;re probably tired of hearing about it, it&amp;rsquo;s so prevalent. Change like this stirs up anxiety and discontent. For one, there’s a change in the development workflow. We no longer manually write all of our code (or at least we probably shouldn&amp;rsquo;t); now it’s &lt;code&gt;prompt =&amp;gt; generate =&amp;gt; review =&amp;gt; tweak =&amp;gt; test =&amp;gt; repeat&lt;/code&gt;. There’s definitely something lost in the process that we fell in love with&amp;hellip; feeling like a wizard flying through tabs and windows without lifting a finger off your keyboard&amp;hellip; achieving &amp;ldquo;flow state&amp;rdquo; when you&amp;rsquo;re just so locked in and know what you&amp;rsquo;re trying to type well before you get there. It&amp;rsquo;s very different now and it feels like it only keeps getting further away from that classic programming flow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Relational Data Design and Drizzle</title>
      <link>http://localhost:1313/posts/2025-03-24/</link>
      <pubDate>Mon, 24 Mar 2025 14:42:21 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-03-24/</guid>
      <description>&lt;p&gt;So, remember &lt;a href=&#34;http://localhost:1313/posts/pickingbackend/&#34;&gt;this&lt;/a&gt; where I talk picking a robust ORM solution? Well, I&amp;rsquo;ve begun to draw out my entity relationship diagram (shoutout to &lt;a href=&#34;https://www.lucidchart.com/&#34; target=&#34;_blank&#34;&gt;Lucidchart&lt;/a&gt;) and I am working on the problem of keeping my tables from getting &amp;ldquo;too wide&amp;rdquo;&amp;ndash; one of the fundamental weaknesses of typical ORMs. Here are a few of the features of Drizzle that are going to save me:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;To create many-to-many relationships you actually create a proper join table where values other than foreign keys can live. I will need some of the join tables to contain information unique to each junction. I wouldn&amp;rsquo;t have that kind of granular control over the join table in a regular ORM. The table would be abstracted.&lt;/li&gt;&#xA;&lt;li&gt;I can use Drizzle&amp;rsquo;s query and join methods to create an efficient SQL query, without worrying about over fetching data. &lt;a href=&#34;https://orm.drizzle.team/docs/joins&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; more about that.&lt;/li&gt;&#xA;&lt;li&gt;If the function calls get out of hand, Drizzle has a &amp;ldquo;&lt;a href=&#34;https://orm.drizzle.team/docs/sql&#34; target=&#34;_blank&#34;&gt;magic SQL&lt;/a&gt;&amp;rdquo; operator that will allow me to write a regular ol&amp;rsquo; SQL queries.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;So far this has been a good design choice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auth with Drizzle, NestJS, and Passport</title>
      <link>http://localhost:1313/posts/mar_10_2025/</link>
      <pubDate>Mon, 10 Mar 2025 13:23:37 -0400</pubDate>
      <guid>http://localhost:1313/posts/mar_10_2025/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;This is a fairly large section, highlighting the process by which I&amp;rsquo;ve created the starting point for the auth and user registration for the new iteration of my bootcamp final project. I wanted to do my best to follow current best practices and build out a solid starting point for user registration and authentication. A primary reference for this work was this excellent &lt;a href=&#34;https://youtu.be/S8Cjx5ua2JU?si=YAPZ5HOr6JTBTEMB&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/@mguay&#34; target=&#34;_blank&#34;&gt;Michael Guay&lt;/a&gt;. I like how he organizes the NestJS project and his approach seems to follow pretty solid, modern best practices, though these things seem to change all the time. He utilizes MongoDB/mongoose and not Postgres/Drizzle so for my app I had to do a fair bit of customization; couldn&amp;rsquo;t just use his code line by line. I&amp;rsquo;ll outline what I did in this article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Project: Picking my Backend</title>
      <link>http://localhost:1313/posts/pickingbackend/</link>
      <pubDate>Thu, 06 Mar 2025 14:09:56 -0500</pubDate>
      <guid>http://localhost:1313/posts/pickingbackend/</guid>
      <description>&lt;p&gt;Today I’ll talk about the first step I’ve taken towards my new pet project: a total rebuild of my bootcamp final project. My team of 3 completed this project in the span of 2 weeks at the very beginning of the 2020 pandemic… as in, we had been going to classes in person, then we entered quarantine just as we got our team assignments and completed everything remotely.&lt;/p&gt;&#xA;&lt;p&gt;At the time we had only been writing code for 10 weeks. In our toolkit we had only vanilla JS + HTML + CSS for frontend, and Django and Python (notably no SQL) for backend. Our team bravely took on learning parts of Vue.js to help us build our UI. The backend was also a departure from what we knew. We used the Django REST framework so we could fetch our data instead of using the out of box Model-View-Template structure to pass data to our views.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ref Shenanigans Kicked my Butt</title>
      <link>http://localhost:1313/posts/useimperativehandle/</link>
      <pubDate>Tue, 25 Feb 2025 16:34:37 -0500</pubDate>
      <guid>http://localhost:1313/posts/useimperativehandle/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/useImperativeHandleDemo/shenanigans.png&#34; alt=&#34;shenanigans&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;intro&#34;&gt;Intro&lt;/h3&gt;&#xA;&lt;p&gt;We all know you&amp;rsquo;re not actually supposed to try to use refs in a React app. I&amp;rsquo;m not talking about when you need to save a mutable value without causing rerenders&amp;hellip; I&amp;rsquo;m referring to the &amp;ldquo;funny business&amp;rdquo; like attaching a ref to a DOM node or using it to lift up the API of a component. This kind of thing feels weird if you&amp;rsquo;re thinking in the &amp;ldquo;React Way&amp;rdquo;. It almost feels naughty&amp;ndash; hence, &amp;ldquo;shenanigans&amp;rdquo; &amp;#x1f602;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shower Thought</title>
      <link>http://localhost:1313/posts/25feb23/</link>
      <pubDate>Mon, 24 Feb 2025 13:48:45 -0500</pubDate>
      <guid>http://localhost:1313/posts/25feb23/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m working on my new creative project and reminding myself how to use Next.js (I haven&amp;rsquo;t touched it since before my last job). This is a cool framework. I&amp;rsquo;m not sure if they&amp;rsquo;ve just sold me on snake oil but if it works how it should, I&amp;rsquo;m really excited to use it and talk about it here!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why I Made a Blog, Not a Portfolio</title>
      <link>http://localhost:1313/posts/myfirstpost/</link>
      <pubDate>Sun, 16 Feb 2025 00:18:44 -0500</pubDate>
      <guid>http://localhost:1313/posts/myfirstpost/</guid>
      <description>&lt;div class=&#39;gradient-keyboard&#39;&gt;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;p&gt;For a dev like me, a portfolio doesn&amp;rsquo;t do the job of illuminating my value and could be a waste of time. Creating a blog with Hugo allows me to save time in development. A blog provides a medium through which I can share what I know and what I&amp;rsquo;m doing in smaller, bite sized chunks. I can also keep a track record while I am also working on private projects.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
