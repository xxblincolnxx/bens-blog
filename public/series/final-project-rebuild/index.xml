<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Final Project Rebuild on A Blog for Ben</title>
    <link>http://localhost:1313/series/final-project-rebuild/</link>
    <description>Recent content in Final Project Rebuild on A Blog for Ben</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 May 2025 11:14:38 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/series/final-project-rebuild/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Paradigms, New Challenges</title>
      <link>http://localhost:1313/posts/2025-05-09/</link>
      <pubDate>Fri, 09 May 2025 11:14:38 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-05-09/</guid>
      <description>&lt;p&gt;I want to take some time in this post to talk about some of the new challenges with my project rebuild, particular to building a Progressive Web App (PWA). As I said in my last post, the PWA paradigm is the reason I&amp;rsquo;m not using Next.js. But there are other challenges around the &amp;ldquo;offline first&amp;rdquo; mentality that I hadn&amp;rsquo;t considered until diving into things.&lt;/p&gt;&#xA;&lt;p&gt;Here are the problems I&amp;rsquo;ve been wrestling with over the past few weeks:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Not this time, Next.js</title>
      <link>http://localhost:1313/posts/2025-04-28/</link>
      <pubDate>Mon, 28 Apr 2025 12:44:42 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-04-28/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a minute since I&amp;rsquo;ve shared an update. Lately, I&amp;rsquo;ve been deep in research and technical interview prep — the kind of work that doesn’t fill up your GitHub contributions graph, but is critical behind the scenes.&lt;/p&gt;&#xA;&lt;p&gt;One major breakthrough: I&amp;rsquo;m rethinking the architecture for my project rebuild.&lt;/p&gt;&#xA;&lt;p&gt;Initially, I fully intended to build with Next.js. It’s an outstanding framework for performant, SEO-optimized web applications, offering major UX and DX wins like smaller bundles, intuitive routing, server-side data fetching, and built-in security benefits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Relational Data Design and Drizzle</title>
      <link>http://localhost:1313/posts/2025-03-24/</link>
      <pubDate>Mon, 24 Mar 2025 14:42:21 -0400</pubDate>
      <guid>http://localhost:1313/posts/2025-03-24/</guid>
      <description>&lt;p&gt;So, remember &lt;a href=&#34;http://localhost:1313/posts/pickingbackend/&#34;&gt;this&lt;/a&gt; where I talk picking a robust ORM solution? Well, I&amp;rsquo;ve begun to draw out my entity relationship diagram (shoutout to &lt;a href=&#34;https://www.lucidchart.com/&#34; target=&#34;_blank&#34;&gt;Lucidchart&lt;/a&gt;) and I am working on the problem of keeping my tables from getting &amp;ldquo;too wide&amp;rdquo;&amp;ndash; one of the fundamental weaknesses of typical ORMs. Here are a few of the features of Drizzle that are going to save me:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;To create many-to-many relationships you actually create a proper join table where values other than foreign keys can live. I will need some of the join tables to contain information unique to each junction. I wouldn&amp;rsquo;t have that kind of granular control over the join table in a regular ORM. The table would be abstracted.&lt;/li&gt;&#xA;&lt;li&gt;I can use Drizzle&amp;rsquo;s query and join methods to create an efficient SQL query, without worrying about over fetching data. &lt;a href=&#34;https://orm.drizzle.team/docs/joins&#34; target=&#34;_blank&#34;&gt;Here&amp;rsquo;s&lt;/a&gt; more about that.&lt;/li&gt;&#xA;&lt;li&gt;If the function calls get out of hand, Drizzle has a &amp;ldquo;&lt;a href=&#34;https://orm.drizzle.team/docs/sql&#34; target=&#34;_blank&#34;&gt;magic SQL&lt;/a&gt;&amp;rdquo; operator that will allow me to write a regular ol&amp;rsquo; SQL queries.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;So far this has been a good design choice.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auth with Drizzle, NestJS, and Passport</title>
      <link>http://localhost:1313/posts/mar_10_2025/</link>
      <pubDate>Mon, 10 Mar 2025 13:23:37 -0400</pubDate>
      <guid>http://localhost:1313/posts/mar_10_2025/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;This is a fairly large section, highlighting the process by which I&amp;rsquo;ve created the starting point for the auth and user registration for the new iteration of my bootcamp final project. I wanted to do my best to follow current best practices and build out a solid starting point for user registration and authentication. A primary reference for this work was this excellent &lt;a href=&#34;https://youtu.be/S8Cjx5ua2JU?si=YAPZ5HOr6JTBTEMB&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/@mguay&#34; target=&#34;_blank&#34;&gt;Michael Guay&lt;/a&gt;. I like how he organizes the NestJS project and his approach seems to follow pretty solid, modern best practices, though these things seem to change all the time. He utilizes MongoDB/mongoose and not Postgres/Drizzle so for my app I had to do a fair bit of customization; couldn&amp;rsquo;t just use his code line by line. I&amp;rsquo;ll outline what I did in this article.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New Project: Picking my Backend</title>
      <link>http://localhost:1313/posts/pickingbackend/</link>
      <pubDate>Thu, 06 Mar 2025 14:09:56 -0500</pubDate>
      <guid>http://localhost:1313/posts/pickingbackend/</guid>
      <description>&lt;p&gt;Today I’ll talk about the first step I’ve taken towards my new pet project: a total rebuild of my bootcamp final project. My team of 3 completed this project in the span of 2 weeks at the very beginning of the 2020 pandemic… as in, we had been going to classes in person, then we entered quarantine just as we got our team assignments and completed everything remotely.&lt;/p&gt;&#xA;&lt;p&gt;At the time we had only been writing code for 10 weeks. In our toolkit we had only vanilla JS + HTML + CSS for frontend, and Django and Python (notably no SQL) for backend. Our team bravely took on learning parts of Vue.js to help us build our UI. The backend was also a departure from what we knew. We used the Django REST framework so we could fetch our data instead of using the out of box Model-View-Template structure to pass data to our views.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
